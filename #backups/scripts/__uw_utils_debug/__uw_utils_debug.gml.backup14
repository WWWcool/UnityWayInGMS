// 2021-03-27 21:51:03
// Unity way library. For more information see the documentation here:
// https://github.com/WWWcool/UnityWayInGMS/wiki

/// Struct for encapsulate debug utils functions
/// @param {string} [_prefix] start of each debug out
/// @returns {UWUtilsDebug} created debug utils

function UWUtilsDebug() constructor
{
    prefix = argument[0] == undefined ? "" : argument[0] + " ";
    double_indent = false;
    
    /// @param {bool} _defined
    /// @param {string} _msg
    /// @param {array} [_args]
    
    static PrintlnIfDefined = function(_defined, _msg)
    {
        if(_defined)
            Println(_msg, argument_count > 2 ? argument[2] : []);
    }
    
    /// @param {string} _msg
    /// @param {array} [_args]
    
    static Println = function(_msg)
    {
        PrintlnWithIndent(_msg, 0, argument_count > 1 ? argument[1] : []);
    }
    
    /// @param {bool} _defined
    /// @param {string} _msg
    /// @param {number} _indent
    /// @param {array} [_args]
    
    static PrintlnWithIndentIfDefined = function(_defined, _msg, _indent, _args)
    {
        if(_defined)
            PrintlnWithIndent(_msg, _indent, argument_count > 3 ? argument[3] : []);
    }
    
    /// @param {string} _msg
    /// @param {number} _indent
    /// @param {array} [_args]
    
    static PrintlnWithIndent = function(_msg, _indent, _args)
    {
        show_debug_message(prefix + GetIndentString(double_indent ? 2 * _indent : _indent) + _msg);
    }
    
    /// @param {number} [_indent]
    /// @returns {string} string with passed number of indent
    
    static GetIndentString = function(_indent)
	{
		var res = "";
		repeat(_indent)
		{
			res += "\t";
		}
		return res;
	}
}

function UWUtilsError() constructor
{
	type = "unknown";
	text = "";
	tabs_count = 1;
	tabs_size = 4;
	
	static prefix = "[UnityWay Error]";
	static symbolControl = (function() {
		var map = {};
		map[$ "\n"] = "\\n";
		map[$ "\t"] = "\\t";
		map[$ "\\"] = "\\\\";
		return map;
	}());
	
	static SetType = function(_component) 
	{
		if is_string(_component) 
		{
			type = _component;
			exit;
		}
		
		type = "unknown";
	}
	
	static AddText = function() 
	{
		var _text = "";
		var _i = -1;
		while (++_i < argument_count) _text += FragmentText(argument[_i]);
		return _text;
	}
	
	static FragmentText = function(_text)
	{
		
	}
	
	static FragmentTextSymbol = function(_text)
	{
		if(!is_string(_text))
			_text = string(_text);
		
		var _length = string_length(_text);
		if _length 
		{
			var _textModify = "";
			var _i = 1, _char, _charControl;
			do
			{
				_char = string_char_at(_text, _i);
				_charControl = symbolControl[$ _char];
				
				if(!is_undefined(_charControl))
					_char = _charControl;
				
				_textModify += _char;
			} until (_i++ == _length);
			return _textModify;
		}
		return "";
	}
	
	static Show = function()
	{
		var build_text = prefix;
		build_text += " : " + build.type;
		
		
	}
}